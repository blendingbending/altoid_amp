#include <Adafruit_GFX.h>                                               // include Adafruit graphics library
#include <Adafruit_ILI9341.h>                                             // include Adafruit ILI9341 TFT library

#define TFT_CS    D2                                                        // TFT CS  pin is connected to NodeMCU pin D2
#define TFT_RST   D3                                                        // TFT RST pin is connected to NodeMCU pin D3
#define TFT_DC    D4  
#define BUTTON_SW D0                                                      // TFT DC  pin is connected to NodeMCU pin D4

//LED TFT
//TRANSISTOR Display
Adafruit_ILI9341 display = Adafruit_ILI9341 (TFT_CS, TFT_DC, TFT_RST);
int delayTime = 200;

#define DISPLAY_WIDTH 240
#define DISPLAY_HEIGHT 320

#define GRID_WIDTH 240
#define GRID_HEIGHT 320

#define SQUID 0
#define CRAB 2
#define OCTOPUS 4

int cx = DISPLAY_WIDTH / 2;
int cy = DISPLAY_HEIGHT / 2;
int w = 1;
int cell = 2;

uint16_t colorChange = ILI9341_WHITE;

int buttonState = 0;  // variable for reading the pushbutton status

#define POTENTIOMETER A0 // ALL CAPS DEFINE
int val = 0;
int postion = 0;
int sensorValue = 0;

int x = 0;
int y = DISPLAY_HEIGHT - 50;
int vx = 10;
int vy = 8;

int cannon[7][15] = {
  {0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,1,1,1,0,0,0,0,0,0},
  {0,0,0,0,0,0,1,1,1,0,0,0,0,0,0},
  {0,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
};

int enemy[6][8][12] = {
  {{0,0,0,0,0,1,1,0,0,0,0,0}, // Squid 0
   {0,0,0,0,1,1,1,1,0,0,0,0},
   {0,0,0,1,1,1,1,1,1,0,0,0},
   {0,0,1,1,0,1,1,0,1,1,0,0},
   {0,0,1,1,1,1,1,1,1,1,0,0},
   {0,0,0,0,1,0,0,1,0,0,0,0},
   {0,0,0,1,0,1,1,0,1,0,0,0},
   {0,0,1,0,1,0,0,1,0,1,0,0}},

  {{0,0,0,0,0,1,1,0,0,0,0,0}, // Squid 1
   {0,0,0,0,1,1,1,1,0,0,0,0},
   {0,0,0,1,1,1,1,1,1,0,0,0},
   {0,0,1,1,0,1,1,0,1,1,0,0},
   {0,0,1,1,1,1,1,1,1,1,0,0},
   {0,0,0,1,0,1,1,0,1,0,0,0},
   {0,0,1,0,0,1,1,0,0,1,0,0},
   {0,0,0,1,0,0,0,0,1,0,0,0}},

  {{0,0,0,1,0,0,0,0,1,0,0,0}, // Crab 0
   {0,0,0,0,1,0,0,1,0,0,0,0},
   {0,1,0,1,1,1,1,1,1,0,1,0},
   {0,1,1,1,0,1,1,0,1,1,1,0},
   {0,1,1,1,1,1,1,1,1,1,1,0},
   {0,0,0,1,1,1,1,1,1,0,0,0},
   {0,0,0,1,0,0,0,0,1,0,0,0},
   {0,0,1,0,0,0,0,0,0,1,0,0}},

  {{0,0,0,1,0,0,0,0,1,0,0,0}, // Crab 1
   {0,0,0,0,1,0,0,1,0,0,0,0},
   {0,0,0,1,1,1,1,1,1,0,0,0},
   {0,0,1,1,0,1,1,0,1,1,0,0},
   {0,1,1,1,1,1,1,1,1,1,1,0},
   {0,1,0,1,1,1,1,1,1,0,1,0},
   {0,1,0,1,0,0,0,0,1,0,1,0},
   {0,0,0,0,1,0,0,1,0,0,0,0}},

  {{0,0,0,0,1,1,1,1,0,0,0,0}, // Octopus 0
   {0,1,1,1,1,1,1,1,1,1,1,0},
   {1,1,1,1,1,1,1,1,1,1,1,1},
   {1,1,1,0,0,1,1,0,0,1,1,1},
   {1,1,1,1,1,1,1,1,1,1,1,1},
   {0,0,0,1,1,0,0,1,1,0,0,0},
   {0,0,1,1,0,1,1,0,1,1,0,0},
   {1,1,0,0,0,0,0,0,0,0,1,1}},

  {{0,0,0,0,1,1,1,1,0,0,0,0}, // Octopus 1
   {0,1,1,1,1,1,1,1,1,1,1,0},
   {1,1,1,1,1,1,1,1,1,1,1,1},
   {1,1,1,0,0,1,1,0,0,1,1,1},
   {1,1,1,1,1,1,1,1,1,1,1,1},
   {0,0,1,1,1,0,0,1,1,1,0,0},
   {0,1,1,0,0,1,1,0,0,1,1,0},
   {0,0,1,1,0,0,0,0,1,1,0,0}},
};

void displayCannon(uint16_t color, int x, int y) {
  for(int i = 0; i < 8; i++) {
    for(int j = 0; j < 15; j++) {
      if (cannon[i][j] == 1) {
        display.fillRect(x + (j * cell),y + (i * cell), cell, cell, color);
      }
    }
  }
}

void displayEnemy(int type, uint16_t color, int x, int y) {
  for(int i = 0; i < 8; i++) {
    for(int j = 0; j < 12; j++) {
      if (enemy[type][i][j] == 1) {
        display.fillRect(x + (j * cell),y + (i * cell), cell, cell, color);
      }
    }
  }
}

void setup() {
  // put your setup code here, to run once:
  display.begin();
  Serial.begin(9600);
//  tft.fillScreen(ILI9341_WHITE);
  display.fillScreen(ILI9341_BLACK);
  // tft.fillRect(cx - (w/2),cy - (w/2),w, w, ILI9341_BLUE);
  pinMode(BUTTON_SW, INPUT);
}

int i = 0;
void loop() {
  // put your main code here, to run repeatedly:
  display.fillRect(sensorValue,DISPLAY_HEIGHT - 50,w, w, ILI9341_BLACK);
  displayCannon(ILI9341_BLACK, sensorValue, y);  

  sensorValue = analogRead(POTENTIOMETER);
  sensorValue = map(sensorValue, 12, 1024, 0, DISPLAY_WIDTH - 30* w); //w * 30 to be the total space needed or pixel, to avoid shape showing a half at the edge 
  Serial.println(sensorValue);

  buttonState = digitalRead(BUTTON_SW);
  if (buttonState == 1) {
    i++;
    i %= 4;
  }

  switch(i){
    case 0:
    colorChange = 0x0320;
    break;

    case 1: 
    colorChange = 0x808080;
    break; 

    case 2: 
    colorChange = 0x49F1;
    break; 
    
    case 3: 
    colorChange = 0xFFDE;
    break; 
  }
  
  displayCannon(colorChange, sensorValue, y);

  delay(delayTime);
}
